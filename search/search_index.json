{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FlightRadarAPI Documentation","text":"<p>Unofficial SDK for FlightRadar24 for Python 3 and Node.js.</p> <p>This SDK should only be used for your own educational purposes. If you are interested in accessing Flightradar24 data commercially, please contact business@fr24.com. </p> <p>See more information at Flightradar24's terms and conditions.</p> <p> </p> <p>Info</p> <p>This is NOT an official FlightRadar24 API. You can access their official API here.</p> <ul> <li> <p> 100% Free and Open Source! </p> <p>The code is open source and available for inspection on GitHub.</p> </li> <li> <p> Python and Node.js</p> <p>Packages are avaiable for use on both Python and Node.js</p> </li> </ul>"},{"location":"#installation","title":"Installation","text":"PythonNode.js <p>To install FlightRadarAPI for Python using pip, run the following command in your terminal:</p> <pre><code>pip install FlightRadarAPI\n</code></pre> <p>To install FlightRadarAPI for Node.js using npm, run the following command in your terminal:</p> <pre><code>npm install flightradarapi\n</code></pre>"},{"location":"nodejs/","title":"Node.js","text":""},{"location":"nodejs/#installation","title":"Installation","text":"<p>To install the FlightRadarAPI for Node.js, use the following npm command:</p> <pre><code>npm install flightradarapi\n</code></pre>"},{"location":"nodejs/#basic-usage","title":"Basic Usage","text":"<p>Start by importing the <code>FlightRadar24API</code> class and creating an instance of it:</p> <pre><code>const { FlightRadar24API } = require(\"flightradarapi\");\nconst frApi = new FlightRadar24API();\n</code></pre>"},{"location":"nodejs/#fetching-data","title":"Fetching Data","text":"<p>You can fetch various types of data using the following methods:</p> <ul> <li> <p>Flights list:</p> <pre><code>let flights = await frApi.getFlights(...);  // Returns a list of Flight objects\n</code></pre> </li> <li> <p>Airports list:</p> <pre><code>let airports = await frApi.getAirports(...);  // Returns a list of Airport objects\n</code></pre> </li> <li> <p>Airlines list:</p> <pre><code>let airlines = await frApi.getAirlines();\n</code></pre> </li> <li> <p>Zones list:</p> <pre><code>let zones = await frApi.getZones();\n</code></pre> </li> </ul>"},{"location":"nodejs/#fetching-detailed-information","title":"Fetching Detailed Information","text":"<p>Fetch more information about a specific flight or airport using the following methods:</p> <ul> <li> <p>Flight details:</p> <pre><code>let flightDetails = await frApi.getFlightDetails(flight);\nflight.setFlightDetails(flightDetails);\n\nconsole.log(\"Flying to\", flight.destinationAirportName);\n</code></pre> </li> <li> <p>Airport details:</p> <pre><code>let airportDetails = await frApi.getAirportDetails(icao);\n</code></pre> <p>Note</p> <p>Arrivals and departures can have a limit <code>flightLimit</code> (max value is 100) to display. When you need to reach more than 100 flights you can use additional parameter <code>page</code> to view other pages.</p> </li> </ul>"},{"location":"nodejs/#advanced-usage","title":"Advanced Usage","text":""},{"location":"nodejs/#fetching-flights-above-a-specific-position","title":"Fetching Flights Above a Specific Position","text":"<p>Use the <code>getBoundsByPoint(...)</code> method to fetch flights above a specific position. This method takes <code>latitude</code> and <code>longitude</code> for your position and <code>radius</code> for the distance in meters from your position to designate a tracking area.</p> <pre><code>// Your point is 52\u00b034'04.7\"N 13\u00b016'57.5\"E from Google Maps and radius 2km\nlet bounds = frApi.getBoundsByPoint(52.567967, 13.282644, 2000);\n\nlet flights = await frApi.getFlights(null, bounds);\n</code></pre>"},{"location":"nodejs/#filtering-flights-and-airports","title":"Filtering Flights and Airports","text":"<p>Use the <code>getFlights(...)</code> method to search for flights by area line, bounds (customized coordinates or obtained by the <code>getZones()</code> method), aircraft registration or aircraft type.</p> <pre><code>let airlineIcao = \"UAE\";\nlet aircraftType = \"B77W\";\n\n// You may also set a custom region, such as: bounds = \"73,-12,-156,38\"\nlet zone = (await frApi.getZones())[\"northamerica\"];\nlet bounds = frApi.getBounds(zone);\n\nlet emiratesFlights = await frApi.getFlights(\n  airlineIcao,\n  bounds,\n  null,\n  aircraftType,\n);\n</code></pre>"},{"location":"nodejs/#fetching-airport-by-icao-or-iata","title":"Fetching Airport by ICAO or IATA","text":"<pre><code>let luklaAirport = await frApi.getAirport(\"VNLK\", true);\n</code></pre>"},{"location":"nodejs/#calculating-distance-between-flights-and-airports","title":"Calculating Distance Between Flights and Airports","text":"<p>The <code>Flight</code> and <code>Airport</code> classes inherit from <code>Entity</code>, which contains the <code>getDistanceFrom(...)</code> method. This method returns the distance between the self instance and another entity in kilometers.</p> <pre><code>let airport = await frApi.getAirport(\"KJFK\");\nlet distance = flight.getDistanceFrom(airport);\n\nconsole.log(\"The flight is\", distance, \"km away from the airport.\");\n</code></pre>"},{"location":"nodejs/#downloading-flight-data","title":"Downloading Flight Data","text":"<p>You can download flight data in either CSV or KML format. The method <code>getHistoryData(...)</code> is used for this purpose. It takes three parameters:</p> <p>Warning</p> <p>If an invalid time is provided, a blank document will be returned. </p> Parameter Description <code>flight_id</code> The ID of the flight. This can be obtained from any other function that returns flight details. <code>file_type</code> The format of the file to download. This can be either \"CSV\" or \"KML\". <code>time</code> The scheduled time of departure (STD) of the flight in UTC, as a Unix timestamp. <p>Here is an example of how to use this method:</p> <pre><code>let historyData = await frApi.getHistoryData(flight, \"csv\", 1706529600);\n\nconst buffer = Buffer.from(historyData);\nfs.writeFile(\"history_data.csv\", buffer);\n</code></pre>"},{"location":"nodejs/#setting-and-getting-real-time-flight-tracker-parameters","title":"Setting and Getting Real-time Flight Tracker Parameters","text":"<p>Set it by using the <code>setFlightTrackerConfig(...)</code> method. It receives a <code>FlightTrackerConfig</code> dataclass instance, but you can also use keyword arguments directly to the method.</p> <p>Get the current configuration with the <code>getFlightTrackerConfig()</code> method, that returns a <code>FlightTrackerConfig</code> instance. Note: creating a new <code>FlightTrackerConfig</code> instance means resetting all parameters to default.</p> <pre><code>let flightTracker = frApi.getFlightTrackerConfig();\nflightTracker.limit = 10\n\nfrApi.setFlightTrackerConfig(flightTracker, ...);\n\nlet flights = await frApi.getFlights(...);  // Returns only 10 flights\n</code></pre>"},{"location":"projects/","title":"Projects using FlightRadarAPI","text":"<ul> <li> <p>Automatic Calibration in Crowd-sourced Network of Spectrum Sensors</p> <p>By Ali Abedi, Joshua Sanz, Anant Sahai, from University of California (UC), Berkeley</p> </li> <li> <p>Airline Status Tracker for top 10 Airport Departures in North America</p> <p>By Adeleke Coker, Frank Song, Greg Chi, from University of California (UC), Berkeley, School of Information</p> </li> <li> <p>Flight Tracker with Weather</p> <p>By Adam Paulson, a Reddit user going by the name C0wsaysmoo</p> </li> <li> <p>Design and implementation project of an aircraft mobile node module for the SeamSAT-LEO constellation simulator</p> <p>By David Anton Dobarro, graduate in Aerospace Technologies Engineering from Universitat Polit\u00e8cnica de Catalunya</p> </li> <li> <p>Fridge Flight Tracker</p> <p>By Colin Waddell, a Glasgow based programmer, website designer and electronics specialist</p> </li> <li> <p>Plane spotting Telegram Bot</p> <p>By Timofey Dmitrenko, aviation geek and Java Spring Boot programmer</p> </li> </ul> <p>Contribute Your Own </p>"},{"location":"python/","title":"Python","text":""},{"location":"python/#installation","title":"Installation","text":"<p>To install the FlightRadarAPI for Python, use the following pip command:</p> <pre><code>pip install FlightRadarAPI\n</code></pre>"},{"location":"python/#basic-usage","title":"Basic Usage","text":"<p>Start by importing the <code>FlightRadar24API</code> class and creating an instance of it:</p> <pre><code>from FlightRadar24 import FlightRadar24API\nfr_api = FlightRadar24API()\n</code></pre>"},{"location":"python/#fetching-data","title":"Fetching Data","text":"<p>You can fetch various types of data using the following methods:</p> <ul> <li> <p>Flights list:</p> <pre><code>flights = fr_api.get_flights(...)  # Returns a list of Flight objects\n</code></pre> </li> <li> <p>Airports list:</p> <pre><code>airports = fr_api.get_airports(...)  # Returns a list of Airport objects\n</code></pre> </li> <li> <p>Airlines list:</p> <pre><code>airlines = fr_api.get_airlines()\n</code></pre> </li> <li> <p>Zones list:</p> <pre><code>zones = fr_api.get_zones()\n</code></pre> </li> </ul>"},{"location":"python/#fetching-detailed-information","title":"Fetching Detailed Information","text":"<p>Fetch more information about a specific flight or airport using the following methods:</p> <ul> <li> <p>Flight details:</p> <pre><code>flight_details = fr_api.get_flight_details(flight)\nflight.set_flight_details(flight_details)\n\nprint(\"Flying to\", flight.destination_airport_name)\n</code></pre> </li> <li> <p>Airport details:</p> <pre><code>airport_details = fr_api.get_airport_details(icao)\n</code></pre> <p>Note</p> <p>Arrivals and departures can have a limit <code>flightLimit</code> (max value is 100) to display. When you need to reach more than 100 flights you can use additional parameter <code>page</code> to view other pages.</p> </li> </ul>"},{"location":"python/#advanced-usage","title":"Advanced Usage","text":""},{"location":"python/#fetching-flights-above-a-specific-position","title":"Fetching Flights Above a Specific Position","text":"<p>Use the <code>get_bounds_by_point(...)</code> method to fetch flights above a specific position. This method takes <code>latitude</code> and <code>longitude</code> for your position and <code>radius</code> for the distance in meters from your position to designate a tracking area.</p> <pre><code># Your point is 52\u00b034'04.7\"N 13\u00b016'57.5\"E from Google Maps and radius 2km\nbounds = fr_api.get_bounds_by_point(52.567967, 13.282644, 2000)\n\nflights = fr_api.get_flights(bounds = bounds)\n</code></pre>"},{"location":"python/#filtering-flights-and-airports","title":"Filtering Flights and Airports","text":"<p>Use the <code>get_flights(...)</code> method to search for flights by area line, bounds (customized coordinates or obtained by the <code>get_zones()</code> method), aircraft registration or aircraft type.</p> <pre><code>airline_icao = \"UAE\"\naircraft_type = \"B77W\"\n\n# You may also set a custom region, such as: bounds = \"73,-12,-156,38\"\nzone = fr_api.get_zones()[\"northamerica\"]\nbounds = fr_api.get_bounds(zone)\n\nemirates_flights = fr_api.get_flights(\n    aircraft_type = aircraft_type,\n    airline = airline_icao,\n    bounds = bounds\n)\n</code></pre>"},{"location":"python/#fetching-airport-by-icao-or-iata","title":"Fetching Airport by ICAO or IATA","text":"<pre><code>lukla_airport = fr_api.get_airport(code = \"VNLK\", details = True)\n</code></pre>"},{"location":"python/#calculating-distance-between-flights-and-airports","title":"Calculating Distance Between Flights and Airports","text":"<p>The <code>Flight</code> and <code>Airport</code> classes inherit from <code>Entity</code>, which contains the <code>get_distance_from(...)</code> method. This method returns the distance between the self instance and another entity in kilometers.</p> <pre><code>airport = fr_api.get_airport(\"KJFK\")\ndistance = flight.get_distance_from(airport)\n\nprint(f\"The flight is {distance} km away from the airport.\")\n</code></pre>"},{"location":"python/#downloading-flight-data","title":"Downloading Flight Data","text":"<pre><code>history_data = fr_api.get_history_data(flight, file_type=\"csv\", time=1706529600)\n\n with open(\"history_data.csv\", \"w\") as file:\n    file.write(history_data)\n</code></pre> <p>Warning</p> <p>If an invalid time is provided, a blank document will be returned. </p> Parameter Description <code>flight_id</code> The ID of the flight. This can be obtained from any other function that returns flight details. <code>file_type</code> The format of the file to download. This can be either \"CSV\" or \"KML\". <code>time</code> The scheduled time of departure (STD) of the flight in UTC, as a Unix timestamp."},{"location":"python/#setting-and-getting-real-time-flight-tracker-parameters","title":"Setting and Getting Real-time Flight Tracker Parameters","text":"<p>Set it by using the <code>set_flight_tracker_config(...)</code> method. It receives a <code>FlightTrackerConfig</code> dataclass instance, but you can also use keyword arguments directly to the method.</p> <p>Get the current configuration with the <code>get_flight_tracker_config()</code> method, that returns a <code>FlightTrackerConfig</code> instance. Note: creating a new <code>FlightTrackerConfig</code> instance means resetting all parameters to default.</p> <pre><code>flight_tracker = fr_api.get_flight_tracker_config()\nflight_tracker.limit = 10\n\nfr_api.set_flight_tracker_config(flight_tracker, ...)\n\nflights = fr_api.get_flights(...)  # Returns only 10 flights\n</code></pre>"}]}